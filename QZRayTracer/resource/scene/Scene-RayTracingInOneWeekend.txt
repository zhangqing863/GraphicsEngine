/*
 目前仅用作代码中手动添加
*/
-----------------------------------------------------------------------------------------------------------------------------------
/* Chapter-08
vector<std::shared_ptr<Shape>> shapes;
std::shared_ptr<Material> redMat = std::make_shared<Lambertian>(Point3f(0.8, 0.3, 0.3));
std::shared_ptr<Material> purpleMat = std::make_shared<Lambertian>(Point3f(0.557, 0.27, 0.678)); 
std::shared_ptr<Material> redgreenMat = std::make_shared<Lambertian>(Point3f(0.8, 0.8, 0.0));
std::shared_ptr<Material> metalGreenMat = std::make_shared<Metal>(Point3f(0.1, 0.74, 0.61), 0);
std::shared_ptr<Material> metalBlueMat = std::make_shared<Metal>(Point3f(0.2, 0.596, 0.8588), 0.3);
std::shared_ptr<Material> metalGlassGreenMat = std::make_shared<Metal>(Point3f(0.8, 0.6, 0.2), 0.6);
std::shared_ptr<Material> metalWhiteMat = std::make_shared<Metal>(Point3f(0.8, 0.8, 0.8), 1.0);
shapes.push_back(CreateSphereShape(Point3f(0, 0, -1), 0.5, purpleMat));
shapes.push_back(CreateSphereShape(Point3f(0, -100.5, -1), 100, redgreenMat));
shapes.push_back(CreateSphereShape(Point3f(0.75, 0, -1), 0.25, metalGreenMat));
shapes.push_back(CreateSphereShape(Point3f(-0.75, 0, -1), 0.25, metalBlueMat));
shapes.push_back(CreateSphereShape(Point3f(1.25, -0.25, -1), 0.25, metalGlassGreenMat));
shapes.push_back(CreateSphereShape(Point3f(-1.25, -0.25, -1), 0.25, metalWhiteMat));
*/ 
-----------------------------------------------------------------------------------------------------------------------------------
/* Chapter-09
vector<std::shared_ptr<Shape>> shapes;
std::shared_ptr<Material> lambRedMat = std::make_shared<Lambertian>(Point3f(0.8, 0.3, 0.3));
std::shared_ptr<Material> lambBlueMat = std::make_shared<Lambertian>(Point3f(0.2, 0.596, 0.8588));
std::shared_ptr<Material> lambPurpleMat = std::make_shared<Lambertian>(Point3f(0.557, 0.27, 0.678));
std::shared_ptr<Material> lambGlassGreengreenMat = std::make_shared<Lambertian>(Point3f(0.8, 0.8, 0.0));
std::shared_ptr<Material> metalGreenMat = std::make_shared<Metal>(Point3f(0.1, 0.74, 0.61), 0);
std::shared_ptr<Material> metalBlueMat = std::make_shared<Metal>(Point3f(0.2, 0.596, 0.8588), 0.3);
std::shared_ptr<Material> metalGlassGreenMat = std::make_shared<Metal>(Point3f(0.8, 0.6, 0.2), 0.6);
std::shared_ptr<Material> metalWhiteMat = std::make_shared<Metal>(Point3f(0.8, 0.8, 0.8), 1.0);
std::shared_ptr<Material> dlcMat = std::make_shared<Dielectric>(1.5);
shapes.push_back(CreateSphereShape(Point3f(0, 0, -1), 0.5, lambBlueMat));
shapes.push_back(CreateSphereShape(Point3f(0, -100.5, -1), 100, lambGlassGreengreenMat));
shapes.push_back(CreateSphereShape(Point3f(1, 0, -1), 0.5, metalGlassGreenMat));
shapes.push_back(CreateSphereShape(Point3f(-1, 0, -1), 0.5, dlcMat));
shapes.push_back(CreateSphereShape(Point3f(-1, 0, -1), -0.45, dlcMat));
shapes.push_back(CreateSphereShape(Point3f(-1, 0, -1), 0.3, metalGreenMat));
*/ 

*/ 
-----------------------------------------------------------------------------------------------------------------------------------
/* Chapter-10
// 构建一个简单的相机
Camera camera(Point3f(-2, 2, 1), Point3f(0, 0, -1), worldUp, 30, aspect);

// 搭建一个简单的场景
vector<std::shared_ptr<Shape>> shapes;
std::shared_ptr<Material> lambRedMat = std::make_shared<Lambertian>(Point3f(0.8, 0.3, 0.3));
std::shared_ptr<Material> lambBlueMat = std::make_shared<Lambertian>(Point3f(0.2, 0.596, 0.8588));
std::shared_ptr<Material> lambPurpleMat = std::make_shared<Lambertian>(Point3f(0.557, 0.27, 0.678));
std::shared_ptr<Material> lambGlassGreengreenMat = std::make_shared<Lambertian>(Point3f(0.8, 0.8, 0.0));
std::shared_ptr<Material> metalGreenMat = std::make_shared<Metal>(Point3f(0.1, 0.74, 0.61), 0);
std::shared_ptr<Material> metalBlueMat = std::make_shared<Metal>(Point3f(0.2, 0.596, 0.8588), 0.3);
std::shared_ptr<Material> metalGlassGreenMat = std::make_shared<Metal>(Point3f(0.8, 0.6, 0.2), 0.6);
std::shared_ptr<Material> metalWhiteMat = std::make_shared<Metal>(Point3f(0.8, 0.8, 0.8), 1.0);
std::shared_ptr<Material> dlcMat = std::make_shared<Dielectric>(1.5);

Float radius = cos(Pi * 0.25);
shapes.push_back(CreateSphereShape(Point3f(-radius, 0, -1), radius, lambBlueMat));
shapes.push_back(CreateSphereShape(Point3f(radius, 0, -1), radius, lambRedMat));
shapes.push_back(CreateSphereShape(Point3f(0, -100.5, -1), 100, lambPurpleMat));
shapes.push_back(CreateSphereShape(Point3f(2, 0, -1), 0.5, metalGreenMat));
shapes.push_back(CreateSphereShape(Point3f(-2, 0, -1), 0.5, dlcMat));
shapes.push_back(CreateSphereShape(Point3f(-2, 0, -1), -0.45, dlcMat));
*/ 
-----------------------------------------------------------------------------------------------------------------------------------
/* Chapter-11
// 构建一个简单的相机
Point3f lookFrom = Point3f(3, 3, 2);
Point3f lookAt = Point3f(0, 0, -1);
Camera camera(lookFrom, lookAt, worldUp, 20, 2.0, 2.0, (lookFrom - lookAt).Length());
// 搭建一个简单的场景
vector<std::shared_ptr<Shape>> shapes;
std::shared_ptr<Material> lambRedMat = std::make_shared<Lambertian>(Point3f(0.8, 0.3, 0.3));
std::shared_ptr<Material> lambBlueMat = std::make_shared<Lambertian>(Point3f(0.2, 0.596, 0.8588));
std::shared_ptr<Material> lambPurpleMat = std::make_shared<Lambertian>(Point3f(0.557, 0.27, 0.678));
std::shared_ptr<Material> lambGlassGreengreenMat = std::make_shared<Lambertian>(Point3f(0.8, 0.8, 0.0));
std::shared_ptr<Material> metalGreenMat = std::make_shared<Metal>(Point3f(0.1, 0.74, 0.61), 0);
std::shared_ptr<Material> metalBlueMat = std::make_shared<Metal>(Point3f(0.2, 0.596, 0.8588), 0.3);
std::shared_ptr<Material> metalGlassGreenMat = std::make_shared<Metal>(Point3f(0.8, 0.6, 0.2), 0.6);
std::shared_ptr<Material> metalWhiteMat = std::make_shared<Metal>(Point3f(0.8, 0.8, 0.8), 1.0);
std::shared_ptr<Material> dlcMat = std::make_shared<Dielectric>(1.5);

shapes.push_back(CreateSphereShape(Point3f(0, -100.5, -1), 100, lambPurpleMat));
shapes.push_back(CreateSphereShape(Point3f(0, 0, -1), 0.5, lambBlueMat));
shapes.push_back(CreateSphereShape(Point3f(1, 0, -1), 0.5, metalGreenMat));
shapes.push_back(CreateSphereShape(Point3f(-1, 0, -1), 0.5, dlcMat));
shapes.push_back(CreateSphereShape(Point3f(-1, 0, -1), -0.45, dlcMat));
*/ 
-----------------------------------------------------------------------------------------------------------------------------------
/* Chapter-12
// 构建一个简单的相机
Point3f lookFrom = Point3f(3, 3, 2);
Point3f lookAt = Point3f(0, 0, -1);
Camera camera(lookFrom, lookAt, worldUp, 20, 2.0, 2.0, (lookFrom - lookAt).Length());
// 搭建一个简单的场景
vector<std::shared_ptr<Shape>> shapes;
std::shared_ptr<Material> lambRedMat = std::make_shared<Lambertian>(Point3f(0.8, 0.3, 0.3));
std::shared_ptr<Material> lambBlueMat = std::make_shared<Lambertian>(Point3f(0.2, 0.596, 0.8588));
std::shared_ptr<Material> lambPurpleMat = std::make_shared<Lambertian>(Point3f(0.557, 0.27, 0.678));
std::shared_ptr<Material> lambGlassGreengreenMat = std::make_shared<Lambertian>(Point3f(0.8, 0.8, 0.0));
std::shared_ptr<Material> metalGreenMat = std::make_shared<Metal>(Point3f(0.1, 0.74, 0.61), 0);
std::shared_ptr<Material> metalBlueMat = std::make_shared<Metal>(Point3f(0.2, 0.596, 0.8588), 0.3);
std::shared_ptr<Material> metalGlassGreenMat = std::make_shared<Metal>(Point3f(0.8, 0.6, 0.2), 0.6);
std::shared_ptr<Material> metalWhiteMat = std::make_shared<Metal>(Point3f(0.8, 0.8, 0.8), 1.0);
std::shared_ptr<Material> dlcMat = std::make_shared<Dielectric>(1.5);

shapes.push_back(CreateSphereShape(Point3f(0, -100.5, -1), 100, lambPurpleMat));
shapes.push_back(CreateSphereShape(Point3f(0, 0, -1), 0.5, lambBlueMat));
shapes.push_back(CreateSphereShape(Point3f(1, 0, -1), 0.5, metalGreenMat));
shapes.push_back(CreateSphereShape(Point3f(-1, 0, -1), 0.5, dlcMat));
shapes.push_back(CreateSphereShape(Point3f(-1, 0, -1), -0.45, dlcMat));
*/ 